<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DifferenceUtility.Net</name>
    </assembly>
    <members>
        <member name="M:DifferenceUtility.Net.DiffResult.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Applies the difference instructions to the <paramref name="collection" />. This method can only be run once and will silently fail if run again.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.DiffResult`1.Apply(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Applies the difference instructions to the <paramref name="collection" />. This method can only be run once and will silently fail if run again.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.DiffUtil.CalculateDiff(System.Collections.IEnumerable,System.Collections.IEnumerable,DifferenceUtility.Net.Base.IDiffCallback)">
            <summary>
            Calculates the difference between <paramref name="oldCollection" /> and <paramref name="newCollection" />.
            </summary>
            <param name="diffCallback">A callback for calculating the difference between the provided collections.</param>
            <returns>A <see cref="T:DifferenceUtility.Net.DiffResult" /> with configured instructions.</returns>
        </member>
        <member name="M:DifferenceUtility.Net.DiffUtil.CalculateDiff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},DifferenceUtility.Net.Base.IDiffCallback{``0})">
            <summary>
            Calculates the difference between <paramref name="oldCollection" /> and <paramref name="newCollection" />.
            </summary>
            <param name="diffCallback">A callback for calculating the difference between the provided collections.</param>
            <returns>A <see cref="T:DifferenceUtility.Net.DiffResult`1" /> with configured instructions.</returns>
        </member>
        <member name="M:DifferenceUtility.Net.DiffUtil.CalculateDiff``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},DifferenceUtility.Net.Base.IDiffCallback{``0,``1})">
            <inheritdoc cref="M:DifferenceUtility.Net.DiffUtil.CalculateDiff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},DifferenceUtility.Net.Base.IDiffCallback{``0})" />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback.AreContentsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback.AreItemsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback.ConstructFinalItem(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback.UpdateContents(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.AreContentsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.AreItemsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.ConstructFinalItem(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.UpdateContents(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.AreContentsTheSame(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.AreItemsTheSame(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.ConstructFinalItem(`0)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`1.UpdateContents(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.AreContentsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.AreItemsTheSame(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.ConstructFinalItem(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.UpdateContents(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.AreContentsTheSame(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.AreItemsTheSame(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.ConstructFinalItem(`1)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.BaseDiffCallback`2.UpdateContents(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback.AreContentsTheSame(System.Object,System.Object)">
            <summary>
            Gets whether there are any content differences between two items.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback.AreItemsTheSame(System.Object,System.Object)" /> returns <c>true</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback.AreItemsTheSame(System.Object,System.Object)">
            <summary>
            Gets whether two objects represent the same data.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback.ConstructFinalItem(System.Object)">
            <summary>
            Use this method to construct the final model representation of <paramref name="newItem" />.
            
            If no new model is required, return <c>null</c> to send <paramref name="newItem" /> to the final collection once <see cref="M:DifferenceUtility.Net.DiffResult.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})" /> is called.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback.AreItemsTheSame(System.Object,System.Object)" /> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback.UpdateContents(System.Object,System.Object)">
            <summary>
            Updates the contents of the <paramref name="item" /> using the data provided by the <paramref name="dataSource" />.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`1.AreContentsTheSame(`0,`0)">
            <summary>
            Gets whether there are any content differences between two items.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback`1.AreItemsTheSame(`0,`0)" /> returns <c>true</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`1.AreItemsTheSame(`0,`0)">
            <inheritdoc cref="M:DifferenceUtility.Net.Base.IDiffCallback.AreItemsTheSame(System.Object,System.Object)" />.
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`1.ConstructFinalItem(`0)">
            <summary>
            Use this method to construct the final model representation of <paramref name="newItem" />.
            
            If no new model is required, return <c>null</c> to send <paramref name="newItem" /> to the final collection once <see cref="M:DifferenceUtility.Net.DiffResult.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})" /> is called.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback`1.AreItemsTheSame(`0,`0)" /> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`1.UpdateContents(`0,`0)">
            <inheritdoc cref="M:DifferenceUtility.Net.Base.IDiffCallback.UpdateContents(System.Object,System.Object)" />.
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`2.AreContentsTheSame(`0,`1)">
            <summary>
            Gets whether there are any content differences between two items.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback`2.AreItemsTheSame(`0,`1)" /> returns <c>true</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`2.AreItemsTheSame(`0,`1)">
            <inheritdoc cref="M:DifferenceUtility.Net.Base.IDiffCallback.AreItemsTheSame(System.Object,System.Object)" />.
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`2.ConstructFinalItem(`1)">
            <summary>
            Use this method to construct the final model representation of <paramref name="newItem" />.
            
            If no new model is required, return <c>null</c> to send <paramref name="newItem" /> to the final collection once <see cref="M:DifferenceUtility.Net.DiffResult.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})" /> is called.
            
            Will only be called if <see cref="M:DifferenceUtility.Net.Base.IDiffCallback`2.AreItemsTheSame(`0,`1)" /> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffCallback`2.UpdateContents(`0,`1)">
            <inheritdoc cref="M:DifferenceUtility.Net.Base.IDiffCallback.UpdateContents(System.Object,System.Object)" />.
        </member>
        <member name="M:DifferenceUtility.Net.Base.IDiffInstruction.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Applies the instruction to the <paramref name="collection" />.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Instructions.InsertDiffInstruction.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <inheritdoc />
        </member>
        <member name="M:DifferenceUtility.Net.Instructions.MoveDiffInstruction.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Applies the instruction to the <paramref name="collection" />.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Instructions.RemoveDiffInstruction.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Applies the instruction to the <paramref name="collection" />.
            </summary>
        </member>
        <member name="M:DifferenceUtility.Net.Instructions.UpdateDiffInstruction.Apply``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Applies the instruction to the <paramref name="collection" />.
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/lewisbennett/difference-utility-net.git</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: master</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: 00ecedf</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: 00ecedf418e2be4f5fe1b3c4e4bcc3eca215f82a</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2021-10-22T16:09:05+01:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 0</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Default</summary>
        </member>
    </members>
</doc>
